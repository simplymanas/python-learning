"""
This type stub file was generated by pyright.
"""

"""
Simple classifier for RTE corpus.

It calculates the overlap in words and named entities between text and
hypothesis, and also whether there are words / named entities in the
hypothesis which fail to occur in the text, since this is an indicator that
the hypothesis is more informative than (i.e not entailed by) the text.

TO DO: better Named Entity classification
TO DO: add lemmatization
"""
class RTEFeatureExtractor(object):
    """
    This builds a bag of words for both the text and the hypothesis after
    throwing away some stopwords, then calculates overlap and difference.
    """
    def __init__(self, rtepair, stop: bool = ..., use_lemmatize: bool = ...):
        """
        :param rtepair: a ``RTEPair`` from which features should be extracted
        :param stop: if ``True``, stopwords are thrown away.
        :type stop: bool
        """
        self.stop = ...
        self.stopwords = ...
        self.negwords = ...
        self.text_tokens = ...
        self.hyp_tokens = ...
        self.text_words = ...
        self.hyp_words = ...
    
    def overlap(self, toktype, debug: bool = ...):
        """
        Compute the overlap between text and hypothesis.

        :param toktype: distinguish Named Entities from ordinary words
        :type toktype: 'ne' or 'word'
        """
        ...
    
    def hyp_extra(self, toktype, debug: bool = ...):
        """
        Compute the extraneous material in the hypothesis.

        :param toktype: distinguish Named Entities from ordinary words
        :type toktype: 'ne' or 'word'
        """
        ...
    
    @staticmethod
    def _ne(token):
        """
        This just assumes that words in all caps or titles are
        named entities.

        :type token: str
        """
        ...
    
    @staticmethod
    def _lemmatize(word):
        """
        Use morphy from WordNet to find the base form of verbs.
        """
        ...
    


def rte_features(rtepair):
    ...

def rte_featurize(rte_pairs):
    ...

def rte_classifier(algorithm):
    ...

