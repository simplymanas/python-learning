"""
This type stub file was generated by pyright.
"""

from nltk.classify.api import ClassifierI
from typing import Any, Optional
from nltk.classify.util import binary_names_demo_features, names_demo

"""
Classifiers that make use of the external 'Weka' package.
"""
_weka_classpath = None
_weka_search = ['.', '/usr/share/weka', '/usr/local/share/weka', '/usr/lib/weka', '/usr/local/lib/weka']
def config_weka(classpath: Optional[Any] = ...):
    ...

def _check_weka_version(jar):
    ...

class WekaClassifier(ClassifierI):
    def __init__(self, formatter, model_filename):
        ...
    
    def prob_classify_many(self, featuresets):
        ...
    
    def classify_many(self, featuresets):
        ...
    
    def _classify_many(self, featuresets, options):
        ...
    
    def parse_weka_distribution(self, s):
        ...
    
    def parse_weka_output(self, lines):
        ...
    
    _CLASSIFIER_CLASS = ...
    @classmethod
    def train(cls, model_filename, featuresets, classifier=..., options=..., quiet: bool = ...):
        ...
    


class ARFF_Formatter:
    """
    Converts featuresets and labeled featuresets to ARFF-formatted
    strings, appropriate for input into Weka.

    Features and classes can be specified manually in the constructor, or may
    be determined from data using ``from_train``.
    """
    def __init__(self, labels, features):
        """
        :param labels: A list of all class labels that can be generated.
        :param features: A list of feature specifications, where
            each feature specification is a tuple (fname, ftype);
            and ftype is an ARFF type string such as NUMERIC or
            STRING.
        """
        ...
    
    def format(self, tokens):
        """Returns a string representation of ARFF output for the given data."""
        ...
    
    def labels(self):
        """Returns the list of classes."""
        ...
    
    def write(self, outfile, tokens):
        """Writes ARFF data to a file for the given data."""
        ...
    
    @staticmethod
    def from_train(tokens):
        """
        Constructs an ARFF_Formatter instance with class labels and feature
        types determined from the given data. Handles boolean, numeric and
        string (note: not nominal) types.
        """
        ...
    
    def header_section(self):
        """Returns an ARFF header as a string."""
        ...
    
    def data_section(self, tokens, labeled: Optional[Any] = ...):
        """
        Returns the ARFF data section for the given data.

        :param tokens: a list of featuresets (dicts) or labelled featuresets
            which are tuples (featureset, label).
        :param labeled: Indicates whether the given tokens are labeled
            or not.  If None, then the tokens will be assumed to be
            labeled if the first token's value is a tuple or list.
        """
        ...
    
    def _fmt_arff_val(self, fval):
        ...
    


if __name__ == '__main__':
    def make_classifier(featuresets):
        ...
    
    classifier = names_demo(make_classifier, binary_names_demo_features)
