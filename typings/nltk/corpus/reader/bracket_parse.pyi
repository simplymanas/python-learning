"""
This type stub file was generated by pyright.
"""

from nltk.corpus.reader.util import *
from nltk.corpus.reader.api import *
from typing import Any, Optional

"""
Corpus reader for corpora that consist of parenthesis-delineated parse trees.
"""
SORTTAGWRD = re.compile(r'\((\d+) ([^\s()]+) ([^\s()]+)\)')
TAGWORD = re.compile(r'\(([^\s()]+) ([^\s()]+)\)')
WORD = re.compile(r'\([^\s()]+ ([^\s()]+)\)')
EMPTY_BRACKETS = re.compile(r'\s*\(\s*\(')
class BracketParseCorpusReader(SyntaxCorpusReader):
    """
    Reader for corpora that consist of parenthesis-delineated parse trees,
    like those found in the "combined" section of the Penn Treebank,
    e.g. "(S (NP (DT the) (JJ little) (NN dog)) (VP (VBD barked)))".

    """
    def __init__(self, root, fileids, comment_char: Optional[Any] = ..., detect_blocks=..., encoding=..., tagset: Optional[Any] = ...):
        """
        :param root: The root directory for this corpus.
        :param fileids: A list or regexp specifying the fileids in this corpus.
        :param comment_char: The character which can appear at the start of
            a line to indicate that the rest of the line is a comment.
        :param detect_blocks: The method that is used to find blocks
          in the corpus; can be 'unindented_paren' (every unindented
          parenthesis starts a new parse) or 'sexpr' (brackets are
          matched).
        :param tagset: The name of the tagset used by this corpus, to be used
              for normalizing or converting the POS tags returned by the
              tagged_...() methods.
        """
        ...
    
    def _read_block(self, stream):
        ...
    
    def _normalize(self, t):
        ...
    
    def _parse(self, t):
        ...
    
    def _tag(self, t, tagset: Optional[Any] = ...):
        ...
    
    def _word(self, t):
        ...
    


class CategorizedBracketParseCorpusReader(CategorizedCorpusReader, BracketParseCorpusReader):
    """
    A reader for parsed corpora whose documents are
    divided into categories based on their file identifiers.
    @author: Nathan Schneider <nschneid@cs.cmu.edu>
    """
    def __init__(self, *args, **kwargs):
        """
        Initialize the corpus reader.  Categorization arguments
        (C{cat_pattern}, C{cat_map}, and C{cat_file}) are passed to
        the L{CategorizedCorpusReader constructor
        <CategorizedCorpusReader.__init__>}.  The remaining arguments
        are passed to the L{BracketParseCorpusReader constructor
        <BracketParseCorpusReader.__init__>}.
        """
        ...
    
    def _resolve(self, fileids, categories):
        ...
    
    def raw(self, fileids: Optional[Any] = ..., categories: Optional[Any] = ...):
        ...
    
    def words(self, fileids: Optional[Any] = ..., categories: Optional[Any] = ...):
        ...
    
    def sents(self, fileids: Optional[Any] = ..., categories: Optional[Any] = ...):
        ...
    
    def paras(self, fileids: Optional[Any] = ..., categories: Optional[Any] = ...):
        ...
    
    def tagged_words(self, fileids: Optional[Any] = ..., categories: Optional[Any] = ..., tagset: Optional[Any] = ...):
        ...
    
    def tagged_sents(self, fileids: Optional[Any] = ..., categories: Optional[Any] = ..., tagset: Optional[Any] = ...):
        ...
    
    def tagged_paras(self, fileids: Optional[Any] = ..., categories: Optional[Any] = ..., tagset: Optional[Any] = ...):
        ...
    
    def parsed_words(self, fileids: Optional[Any] = ..., categories: Optional[Any] = ...):
        ...
    
    def parsed_sents(self, fileids: Optional[Any] = ..., categories: Optional[Any] = ...):
        ...
    
    def parsed_paras(self, fileids: Optional[Any] = ..., categories: Optional[Any] = ...):
        ...
    


class AlpinoCorpusReader(BracketParseCorpusReader):
    """
    Reader for the Alpino Dutch Treebank.
    This corpus has a lexical breakdown structure embedded, as read by _parse
    Unfortunately this puts punctuation and some other words out of the sentence
    order in the xml element tree. This is no good for tag_ and word_
    _tag and _word will be overridden to use a non-default new parameter 'ordered'
    to the overridden _normalize function. The _parse function can then remain
    untouched.
    """
    def __init__(self, root, encoding=..., tagset: Optional[Any] = ...):
        ...
    
    def _normalize(self, t, ordered: bool = ...):
        """Normalize the xml sentence element in t.
        The sentence elements <alpino_ds>, although embedded in a few overall
        xml elements, are seperated by blank lines. That's how the reader can
        deliver them one at a time.
        Each sentence has a few category subnodes that are of no use to us.
        The remaining word nodes may or may not appear in the proper order.
        Each word node has attributes, among which:
        - begin : the position of the word in the sentence
        - pos   : Part of Speech: the Tag
        - word  : the actual word
        The return value is a string with all xml elementes replaced by
        clauses: either a cat clause with nested clauses, or a word clause.
        The order of the bracket clauses closely follows the xml.
        If ordered == True, the word clauses include an order sequence number.
        If ordered == False, the word clauses only have pos and word parts.
        """
        ...
    
    def _tag(self, t, tagset: Optional[Any] = ...):
        ...
    
    def _word(self, t):
        """Return a correctly ordered list if words"""
        ...
    


