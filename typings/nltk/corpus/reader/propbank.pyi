"""
This type stub file was generated by pyright.
"""

from functools import total_ordering
from nltk.corpus.reader.util import *
from nltk.corpus.reader.api import *
from typing import Any, Optional

class PropbankCorpusReader(CorpusReader):
    """
    Corpus reader for the propbank corpus, which augments the Penn
    Treebank with information about the predicate argument structure
    of every verb instance.  The corpus consists of two parts: the
    predicate-argument annotations themselves, and a set of "frameset
    files" which define the argument labels used by the annotations,
    on a per-verb basis.  Each "frameset file" contains one or more
    predicates, such as ``'turn'`` or ``'turn_on'``, each of which is
    divided into coarse-grained word senses called "rolesets".  For
    each "roleset", the frameset file provides descriptions of the
    argument roles, along with examples.
    """
    def __init__(self, root, propfile, framefiles=..., verbsfile: Optional[Any] = ..., parse_fileid_xform: Optional[Any] = ..., parse_corpus: Optional[Any] = ..., encoding=...):
        """
        :param root: The root directory for this corpus.
        :param propfile: The name of the file containing the predicate-
            argument annotations (relative to ``root``).
        :param framefiles: A list or regexp specifying the frameset
            fileids for this corpus.
        :param parse_fileid_xform: A transform that should be applied
            to the fileids in this corpus.  This should be a function
            of one argument (a fileid) that returns a string (the new
            fileid).
        :param parse_corpus: The corpus containing the parse trees
            corresponding to this corpus.  These parse trees are
            necessary to resolve the tree pointers used by propbank.
        """
        ...
    
    def raw(self, fileids: Optional[Any] = ...):
        """
        :return: the text contents of the given fileids, as a single string.
        """
        ...
    
    def instances(self, baseform: Optional[Any] = ...):
        """
        :return: a corpus view that acts as a list of
        ``PropBankInstance`` objects, one for each noun in the corpus.
        """
        ...
    
    def lines(self):
        """
        :return: a corpus view that acts as a list of strings, one for
        each line in the predicate-argument annotation file.
        """
        ...
    
    def roleset(self, roleset_id):
        """
        :return: the xml description for the given roleset.
        """
        ...
    
    def rolesets(self, baseform: Optional[Any] = ...):
        """
        :return: list of xml descriptions for rolesets.
        """
        ...
    
    def verbs(self):
        """
        :return: a corpus view that acts as a list of all verb lemmas
        in this corpus (from the verbs.txt file).
        """
        ...
    
    def _read_instance_block(self, stream, instance_filter=...):
        ...
    


@compat.python_2_unicode_compatible
class PropbankInstance(object):
    def __init__(self, fileid, sentnum, wordnum, tagger, roleset, inflection, predicate, arguments, parse_corpus: Optional[Any] = ...):
        self.fileid = ...
        self.sentnum = ...
        self.wordnum = ...
        self.tagger = ...
        self.roleset = ...
        self.inflection = ...
        self.predicate = ...
        self.arguments = ...
        self.parse_corpus = ...
    
    @property
    def baseform(self):
        """The baseform of the predicate."""
        ...
    
    @property
    def sensenumber(self):
        """The sense number of the predicate."""
        ...
    
    @property
    def predid(self):
        """Identifier of the predicate."""
        ...
    
    def __repr__(self):
        ...
    
    def __str__(self):
        ...
    
    def _get_tree(self):
        ...
    
    tree = ...
    @staticmethod
    def parse(s, parse_fileid_xform: Optional[Any] = ..., parse_corpus: Optional[Any] = ...):
        ...
    


class PropbankPointer(object):
    """
    A pointer used by propbank to identify one or more constituents in
    a parse tree.  ``PropbankPointer`` is an abstract base class with
    three concrete subclasses:

      - ``PropbankTreePointer`` is used to point to single constituents.
      - ``PropbankSplitTreePointer`` is used to point to 'split'
        constituents, which consist of a sequence of two or more
        ``PropbankTreePointer`` pointers.
      - ``PropbankChainTreePointer`` is used to point to entire trace
        chains in a tree.  It consists of a sequence of pieces, which
        can be ``PropbankTreePointer`` or ``PropbankSplitTreePointer`` pointers.
    """
    def __init__(self):
        ...
    


@compat.python_2_unicode_compatible
class PropbankChainTreePointer(PropbankPointer):
    def __init__(self, pieces):
        self.pieces = ...
    
    def __str__(self):
        ...
    
    def __repr__(self):
        ...
    
    def select(self, tree):
        ...
    


@compat.python_2_unicode_compatible
class PropbankSplitTreePointer(PropbankPointer):
    def __init__(self, pieces):
        self.pieces = ...
    
    def __str__(self):
        ...
    
    def __repr__(self):
        ...
    
    def select(self, tree):
        ...
    


@total_ordering
@compat.python_2_unicode_compatible
class PropbankTreePointer(PropbankPointer):
    """
    wordnum:height*wordnum:height*...
    wordnum:height,

    """
    def __init__(self, wordnum, height):
        self.wordnum = ...
        self.height = ...
    
    @staticmethod
    def parse(s):
        ...
    
    def __str__(self):
        ...
    
    def __repr__(self):
        ...
    
    def __eq__(self, other):
        ...
    
    def __ne__(self, other):
        ...
    
    def __lt__(self, other):
        ...
    
    def select(self, tree):
        ...
    
    def treepos(self, tree):
        """
        Convert this pointer to a standard 'tree position' pointer,
        given that it points to the given tree.
        """
        ...
    


@compat.python_2_unicode_compatible
class PropbankInflection(object):
    INFINITIVE = ...
    GERUND = ...
    PARTICIPLE = ...
    FINITE = ...
    FUTURE = ...
    PAST = ...
    PRESENT = ...
    PERFECT = ...
    PROGRESSIVE = ...
    PERFECT_AND_PROGRESSIVE = ...
    THIRD_PERSON = ...
    ACTIVE = ...
    PASSIVE = ...
    NONE = ...
    def __init__(self, form=..., tense=..., aspect=..., person=..., voice=...):
        self.form = ...
        self.tense = ...
        self.aspect = ...
        self.person = ...
        self.voice = ...
    
    def __str__(self):
        ...
    
    def __repr__(self):
        ...
    
    _VALIDATE = ...
    @staticmethod
    def parse(s):
        ...
    


