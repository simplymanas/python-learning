"""
This type stub file was generated by pyright.
"""

from nltk.corpus.reader.api import SyntaxCorpusReader
from typing import Any, Optional

_morphs2str_default = lambda morphs: '/'.join(m[0] for m in morphs if m[0] != 'EOS')
class KNBCorpusReader(SyntaxCorpusReader):
    """
    This class implements:
      - ``__init__``, which specifies the location of the corpus
        and a method for detecting the sentence blocks in corpus files.
      - ``_read_block``, which reads a block from the input stream.
      - ``_word``, which takes a block and returns a list of list of words.
      - ``_tag``, which takes a block and returns a list of list of tagged
        words.
      - ``_parse``, which takes a block and returns a list of parsed
        sentences.

    The structure of tagged words:
      tagged_word = (word(str), tags(tuple))
      tags = (surface, reading, lemma, pos1, posid1, pos2, posid2, pos3, posid3, others ...)

    Usage example
    -------------

    >>> from nltk.corpus.util import LazyCorpusLoader
    >>> knbc = LazyCorpusLoader(
    ...     'knbc/corpus1',
    ...     KNBCorpusReader,
    ...     r'.*/KN.*',
    ...     encoding='euc-jp',
    ... )

    >>> len(knbc.sents()[0])
    9

    """
    def __init__(self, root, fileids, encoding=..., morphs2str=...):
        """
        Initialize KNBCorpusReader
        morphs2str is a function to convert morphlist to str for tree representation
        for _parse()
        """
        self.morphs2str = ...
    
    def _read_block(self, stream):
        ...
    
    def _word(self, t):
        ...
    
    def _tag(self, t, tagset: Optional[Any] = ...):
        ...
    
    def _parse(self, t):
        ...
    


def demo():
    ...

def test():
    ...

if __name__ == '__main__':
    ...
