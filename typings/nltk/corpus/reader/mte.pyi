"""
This type stub file was generated by pyright.
"""

from nltk.corpus.reader import TaggedCorpusReader
from nltk.corpus.reader.xmldocs import XMLCorpusView
from typing import Any, Optional

"""
A reader for corpora whose documents are in MTE format.
"""
def xpath(root, path, ns):
    ...

class MTECorpusView(XMLCorpusView):
    """
    Class for lazy viewing the MTE Corpus.
    """
    def __init__(self, fileid, tagspec, elt_handler: Optional[Any] = ...):
        ...
    
    def read_block(self, stream, tagspec: Optional[Any] = ..., elt_handler: Optional[Any] = ...):
        ...
    


class MTEFileReader:
    """
    Class for loading the content of the multext-east corpus. It
    parses the xml files and does some tag-filtering depending on the
    given method parameters.
    """
    ns = ...
    tag_ns = ...
    xml_ns = ...
    word_path = ...
    sent_path = ...
    para_path = ...
    def __init__(self, file_path):
        ...
    
    @classmethod
    def _word_elt(cls, elt, context):
        ...
    
    @classmethod
    def _sent_elt(cls, elt, context):
        ...
    
    @classmethod
    def _para_elt(cls, elt, context):
        ...
    
    @classmethod
    def _tagged_word_elt(cls, elt, context):
        ...
    
    @classmethod
    def _tagged_sent_elt(cls, elt, context):
        ...
    
    @classmethod
    def _tagged_para_elt(cls, elt, context):
        ...
    
    @classmethod
    def _lemma_word_elt(cls, elt, context):
        ...
    
    @classmethod
    def _lemma_sent_elt(cls, elt, context):
        ...
    
    @classmethod
    def _lemma_para_elt(cls, elt, context):
        ...
    
    def words(self):
        ...
    
    def sents(self):
        ...
    
    def paras(self):
        ...
    
    def lemma_words(self):
        ...
    
    def tagged_words(self, tagset, tags):
        ...
    
    def lemma_sents(self):
        ...
    
    def tagged_sents(self, tagset, tags):
        ...
    
    def lemma_paras(self):
        ...
    
    def tagged_paras(self, tagset, tags):
        ...
    


class MTETagConverter:
    """
    Class for converting msd tags to universal tags, more conversion
    options are currently not implemented.
    """
    mapping_msd_universal = ...
    @staticmethod
    def msd_to_universal(tag):
        """
        This function converts the annotation from the Multex-East to the universal tagset
        as described in Chapter 5 of the NLTK-Book

        Unknown Tags will be mapped to X. Punctuation marks are not supported in MSD tags, so
        """
        ...
    


class MTECorpusReader(TaggedCorpusReader):
    """
    Reader for corpora following the TEI-p5 xml scheme, such as MULTEXT-East.
    MULTEXT-East contains part-of-speech-tagged words with a quite precise tagging
    scheme. These tags can be converted to the Universal tagset
    """
    def __init__(self, root: Optional[Any] = ..., fileids: Optional[Any] = ..., encoding=...):
        """
        Construct a new MTECorpusreader for a set of documents
        located at the given root directory.  Example usage:

            >>> root = '/...path to corpus.../'
            >>> reader = MTECorpusReader(root, 'oana-*.xml', 'utf8') # doctest: +SKIP

        :param root: The root directory for this corpus. (default points to location in multext config file)
        :param fileids: A list or regexp specifying the fileids in this corpus. (default is oana-en.xml)
        :param enconding: The encoding of the given files (default is utf8)
        """
        ...
    
    def __fileids(self, fileids):
        ...
    
    def readme(self):
        """
        Prints some information about this corpus.
        :return: the content of the attached README file
        :rtype: str
        """
        ...
    
    def raw(self, fileids: Optional[Any] = ...):
        """
	    :param fileids: A list specifying the fileids that should be used.
        :return: the given file(s) as a single string.
        :rtype: str
        """
        ...
    
    def words(self, fileids: Optional[Any] = ...):
        """
	    :param fileids: A list specifying the fileids that should be used.
        :return: the given file(s) as a list of words and punctuation symbols.
        :rtype: list(str)
        """
        ...
    
    def sents(self, fileids: Optional[Any] = ...):
        """
	    :param fileids: A list specifying the fileids that should be used.
        :return: the given file(s) as a list of sentences or utterances,
                 each encoded as a list of word strings
        :rtype: list(list(str))
        """
        ...
    
    def paras(self, fileids: Optional[Any] = ...):
        """
	    :param fileids: A list specifying the fileids that should be used.
        :return: the given file(s) as a list of paragraphs, each encoded as a list
                 of sentences, which are in turn encoded as lists of word string
        :rtype: list(list(list(str)))
        """
        ...
    
    def lemma_words(self, fileids: Optional[Any] = ...):
        """
	    :param fileids: A list specifying the fileids that should be used.
        :return: the given file(s) as a list of words, the corresponding lemmas
                 and punctuation symbols, encoded as tuples (word, lemma)
        :rtype: list(tuple(str,str))
        """
        ...
    
    def tagged_words(self, fileids: Optional[Any] = ..., tagset=..., tags=...):
        """
	    :param fileids: A list specifying the fileids that should be used.
        :param tagset: The tagset that should be used in the returned object,
                       either "universal" or "msd", "msd" is the default
        :param tags: An MSD Tag that is used to filter all parts of the used corpus
                     that are not more precise or at least equal to the given tag
        :return: the given file(s) as a list of tagged words and punctuation symbols
                 encoded as tuples (word, tag)
        :rtype: list(tuple(str, str))
        """
        ...
    
    def lemma_sents(self, fileids: Optional[Any] = ...):
        """
	    :param fileids: A list specifying the fileids that should be used.
        :return: the given file(s) as a list of sentences or utterances, each
                 encoded as a list of tuples of the word and the corresponding
                 lemma (word, lemma)
        :rtype: list(list(tuple(str, str)))
        """
        ...
    
    def tagged_sents(self, fileids: Optional[Any] = ..., tagset=..., tags=...):
        """
	    :param fileids: A list specifying the fileids that should be used.
        :param tagset: The tagset that should be used in the returned object,
                       either "universal" or "msd", "msd" is the default
        :param tags: An MSD Tag that is used to filter all parts of the used corpus
                     that are not more precise or at least equal to the given tag
        :return: the given file(s) as a list of sentences or utterances, each
                 each encoded as a list of (word,tag) tuples
        :rtype: list(list(tuple(str, str)))
        """
        ...
    
    def lemma_paras(self, fileids: Optional[Any] = ...):
        """
	    :param fileids: A list specifying the fileids that should be used.
        :return: the given file(s) as a list of paragraphs, each encoded as a
                 list of sentences, which are in turn encoded as a list of
                 tuples of the word and the corresponding lemma (word, lemma)
        :rtype: list(List(List(tuple(str, str))))
        """
        ...
    
    def tagged_paras(self, fileids: Optional[Any] = ..., tagset=..., tags=...):
        """
	    :param fileids: A list specifying the fileids that should be used.
        :param tagset: The tagset that should be used in the returned object,
                       either "universal" or "msd", "msd" is the default
        :param tags: An MSD Tag that is used to filter all parts of the used corpus
                     that are not more precise or at least equal to the given tag
        :return: the given file(s) as a list of paragraphs, each encoded as a
                 list of sentences, which are in turn encoded as a list
                 of (word,tag) tuples
        :rtype: list(list(list(tuple(str, str))))
        """
        ...
    


