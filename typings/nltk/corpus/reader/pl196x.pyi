"""
This type stub file was generated by pyright.
"""

from nltk.corpus.reader.api import *
from nltk.corpus.reader.xmldocs import XMLCorpusReader
from typing import Any, Optional

PARA = re.compile(r'<p(?: [^>]*){0,1}>(.*?)</p>')
SENT = re.compile(r'<s(?: [^>]*){0,1}>(.*?)</s>')
TAGGEDWORD = re.compile(r'<([wc](?: [^>]*){0,1}>)(.*?)</[wc]>')
WORD = re.compile(r'<[wc](?: [^>]*){0,1}>(.*?)</[wc]>')
TYPE = re.compile(r'type="(.*?)"')
ANA = re.compile(r'ana="(.*?)"')
TEXTID = re.compile(r'text id="(.*?)"')
class TEICorpusView(StreamBackedCorpusView):
    def __init__(self, corpus_file, tagged, group_by_sent, group_by_para, tagset: Optional[Any] = ..., head_len=..., textids: Optional[Any] = ...):
        ...
    
    _pagesize = ...
    def read_block(self, stream):
        ...
    
    def _parse_tag(self, tag_word_tuple):
        ...
    


class Pl196xCorpusReader(CategorizedCorpusReader, XMLCorpusReader):
    head_len = ...
    def __init__(self, *args, **kwargs):
        ...
    
    def _init_textids(self):
        ...
    
    def _add_textids(self, file_id, text_id):
        ...
    
    def _resolve(self, fileids, categories, textids: Optional[Any] = ...):
        ...
    
    def decode_tag(self, tag):
        ...
    
    def textids(self, fileids: Optional[Any] = ..., categories: Optional[Any] = ...):
        """
        In the pl196x corpus each category is stored in single
        file and thus both methods provide identical functionality. In order
        to accommodate finer granularity, a non-standard textids() method was
        implemented. All the main functions can be supplied with a list
        of required chunks---giving much more control to the user.
        """
        ...
    
    def words(self, fileids: Optional[Any] = ..., categories: Optional[Any] = ..., textids: Optional[Any] = ...):
        ...
    
    def sents(self, fileids: Optional[Any] = ..., categories: Optional[Any] = ..., textids: Optional[Any] = ...):
        ...
    
    def paras(self, fileids: Optional[Any] = ..., categories: Optional[Any] = ..., textids: Optional[Any] = ...):
        ...
    
    def tagged_words(self, fileids: Optional[Any] = ..., categories: Optional[Any] = ..., textids: Optional[Any] = ...):
        ...
    
    def tagged_sents(self, fileids: Optional[Any] = ..., categories: Optional[Any] = ..., textids: Optional[Any] = ...):
        ...
    
    def tagged_paras(self, fileids: Optional[Any] = ..., categories: Optional[Any] = ..., textids: Optional[Any] = ...):
        ...
    
    def xml(self, fileids: Optional[Any] = ..., categories: Optional[Any] = ...):
        ...
    
    def raw(self, fileids: Optional[Any] = ..., categories: Optional[Any] = ...):
        ...
    


