"""
This type stub file was generated by pyright.
"""

from nltk.tokenize.api import TokenizerI
from typing import Any, Optional

_stanford_url = 'https://nlp.stanford.edu/software'
class StanfordSegmenter(TokenizerI):
    """Interface to the Stanford Segmenter

    If stanford-segmenter version is older than 2016-10-31, then path_to_slf4j
    should be provieded, for example::

        seg = StanfordSegmenter(path_to_slf4j='/YOUR_PATH/slf4j-api.jar')

    >>> from nltk.tokenize.stanford_segmenter import StanfordSegmenter
    >>> seg = StanfordSegmenter()
    >>> seg.default_config('zh')
    >>> sent = u'这是斯坦福中文分词器测试'
    >>> print(seg.segment(sent))
    \u8fd9 \u662f \u65af\u5766\u798f \u4e2d\u6587 \u5206\u8bcd\u5668 \u6d4b\u8bd5
    <BLANKLINE>
    >>> seg.default_config('ar')
    >>> sent = u'هذا هو تصنيف ستانفورد العربي للكلمات'
    >>> print(seg.segment(sent.split()))
    \u0647\u0630\u0627 \u0647\u0648 \u062a\u0635\u0646\u064a\u0641 \u0633\u062a\u0627\u0646\u0641\u0648\u0631\u062f \u0627\u0644\u0639\u0631\u0628\u064a \u0644 \u0627\u0644\u0643\u0644\u0645\u0627\u062a
    <BLANKLINE>
    """
    _JAR = ...
    def __init__(self, path_to_jar: Optional[Any] = ..., path_to_slf4j: Optional[Any] = ..., java_class: Optional[Any] = ..., path_to_model: Optional[Any] = ..., path_to_dict: Optional[Any] = ..., path_to_sihan_corpora_dict: Optional[Any] = ..., sihan_post_processing=..., keep_whitespaces=..., encoding=..., options: Optional[Any] = ..., verbose: bool = ..., java_options=...):
        self.java_options = ...
    
    def default_config(self, lang):
        """
        Attempt to intialize Stanford Word Segmenter for the specified language
        using the STANFORD_SEGMENTER and STANFORD_MODELS environment variables
        """
        ...
    
    def tokenize(self, s):
        ...
    
    def segment_file(self, input_file_path):
        """
        """
        ...
    
    def segment(self, tokens):
        ...
    
    def segment_sents(self, sentences):
        """
        """
        ...
    
    def _execute(self, cmd, verbose: bool = ...):
        ...
    


def setup_module(module):
    ...

