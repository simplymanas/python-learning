"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

class CooperStore(object):
    """
    A container for handling quantifier ambiguity via Cooper storage.
    """
    def __init__(self, featstruct):
        """
        :param featstruct: The value of the ``sem`` node in a tree from
            ``parse_with_bindops()``
        :type featstruct: FeatStruct (with features ``core`` and ``store``)

        """
        self.featstruct = ...
        self.readings = ...
    
    def _permute(self, lst):
        """
        :return: An iterator over the permutations of the input list
        :type lst: list
        :rtype: iter
        """
        ...
    
    def s_retrieve(self, trace: bool = ...):
        """
        Carry out S-Retrieval of binding operators in store. If hack=True,
        serialize the bindop and core as strings and reparse. Ugh.

        Each permutation of the store (i.e. list of binding operators) is
        taken to be a possible scoping of quantifiers. We iterate through the
        binding operators in each permutation, and successively apply them to
        the current term, starting with the core semantic representation,
        working from the inside out.

        Binding operators are of the form::

             bo(\P.all x.(man(x) -> P(x)),z1)
        """
        ...
    


def parse_with_bindops(sentence, grammar: Optional[Any] = ..., trace=...):
    """
    Use a grammar with Binding Operators to parse a sentence.
    """
    ...

def demo():
    ...

if __name__ == '__main__':
    ...
