"""
This type stub file was generated by pyright.
"""

import os
import sys
import fractions
import io
from datetime import timedelta, timezone, tzinfo
from typing import Any, Optional

PY3 = sys.version_info[0] == 3
if PY3:
    def get_im_class(meth):
        ...
    
    StringIO = io.StringIO
    BytesIO = io.BytesIO
    UTC = timezone.utc
else:
    def get_im_class(meth):
        ...
    
    BytesIO = StringIO
    ZERO = timedelta(0)
    HOUR = timedelta(hours=1)
    class UTC(tzinfo):
        """UTC"""
        def utcoffset(self, dt):
            ...
        
        def tzname(self, dt):
            ...
        
        def dst(self, dt):
            ...
        
    
    
    UTC = UTC()
    class UnicodeWriter:
        """
        A CSV writer which will write rows to CSV file "f",
        which is encoded in the given encoding.
        see https://docs.python.org/2/library/csv.html
        """
        def __init__(self, f, dialect=..., encoding=..., errors=..., **kwds):
            self.queue = ...
            self.writer = ...
            self.stream = ...
            self.encoder = ...
        
        def encode(self, data):
            ...
        
        def writerow(self, row):
            ...
        
    
    
    class TemporaryDirectory(object):
        """Create and return a temporary directory.  This has the same
        behavior as mkdtemp but can be used as a context manager.  For
        example:

            with TemporaryDirectory() as tmpdir:
                ...

        Upon exiting the context, the directory and everything contained
        in it are removed.

        http://stackoverflow.com/questions/19296146/tempfile-temporarydirectory-context-manager-in-python-2-7
        """
        def __init__(self, suffix=..., prefix=..., dir: Optional[Any] = ...):
            self.name = ...
            self.name = ...
        
        def __repr__(self):
            ...
        
        def __enter__(self):
            ...
        
        def cleanup(self, _warn: bool = ...):
            ...
        
        def __exit__(self, exc, value, tb):
            ...
        
        def __del__(self):
            ...
        
        _listdir = ...
        _path_join = ...
        _isdir = ...
        _islink = ...
        _remove = ...
        _rmdir = ...
        _warn = ...
        def _rmtree(self, path):
            ...
        
    
    
DATA_UPDATES = [("chunkers", "maxent_ne_chunker"), ("help", "tagsets"), ("taggers", "maxent_treebank_pos_tagger"), ("tokenizers", "punkt")]
_PY3_DATA_UPDATES = [os.path.join(*path_list) for path_list in DATA_UPDATES]
def add_py3_data(path):
    ...

def py3_data(init_func):
    ...

def remove_accents(text):
    ...

def python_2_unicode_compatible(klass):
    """
    This decorator defines __unicode__ method and fixes
    __repr__ and __str__ methods under Python 2.

    To support Python 2 and 3 with a single code base,
    define __str__ and __repr__ methods returning unicode
    text and apply this decorator to the class.

    Original __repr__ and __str__ would be available
    as unicode_repr and __unicode__ (under both Python 2
    and Python 3).
    """
    ...

def unicode_repr(obj):
    """
    For classes that was fixed with @python_2_unicode_compatible
    ``unicode_repr`` returns ``obj.unicode_repr()``; for unicode strings
    the result is returned without "u" letter (to make output the
    same under Python 2.x and Python 3.x); for other variables
    it is the same as ``repr``.
    """
    ...

def _transliterated(method):
    ...

def _7bit(method):
    ...

def _was_fixed(method):
    ...

class Fraction(fractions.Fraction):
    """
    This is a simplified backwards compatible version of fractions.Fraction
    from Python >=3.5. It adds the `_normalize` parameter such that it does
    not normalize the denominator to the Greatest Common Divisor (gcd) when
    the numerator is 0.

    This is most probably only used by the nltk.translate.bleu_score.py where
    numerator and denominator of the different ngram precisions are mutable.
    But the idea of "mutable" fraction might not be applicable to other usages,
    See http://stackoverflow.com/questions/34561265

    This objects should be deprecated once NLTK stops supporting Python < 3.5
    See https://github.com/nltk/nltk/issues/1330
    """
    def __new__(cls, numerator=..., denominator: Optional[Any] = ..., _normalize: bool = ...):
        ...
    


