"""
This type stub file was generated by pyright.
"""

from nltk.draw.util import CanvasWidget

"""
Graphically display a Tree.
"""
class TreeSegmentWidget(CanvasWidget):
    """
    A canvas widget that displays a single segment of a hierarchical
    tree.  Each ``TreeSegmentWidget`` connects a single "node widget"
    to a sequence of zero or more "subtree widgets".  By default, the
    bottom of the node is connected to the top of each subtree by a
    single line.  However, if the ``roof`` attribute is set, then a
    single triangular "roof" will connect the node to all of its
    children.

    Attributes:
      - ``roof``: What sort of connection to draw between the node and
        its subtrees.  If ``roof`` is true, draw a single triangular
        "roof" over the subtrees.  If ``roof`` is false, draw a line
        between each subtree and the node.  Default value is false.
      - ``xspace``: The amount of horizontal space to leave between
        subtrees when managing this widget.  Default value is 10.
      - ``yspace``: The amount of space to place between the node and
        its children when managing this widget.  Default value is 15.
      - ``color``: The color of the lines connecting the node to its
        subtrees; and of the outline of the triangular roof.  Default
        value is ``'#006060'``.
      - ``fill``: The fill color for the triangular roof.  Default
        value is ``''`` (no fill).
      - ``width``: The width of the lines connecting the node to its
        subtrees; and of the outline of the triangular roof.  Default
        value is 1.
      - ``orientation``: Determines whether the tree branches downwards
        or rightwards.  Possible values are ``'horizontal'`` and
        ``'vertical'``.  The default value is ``'vertical'`` (i.e.,
        branch downwards).
      - ``draggable``: whether the widget can be dragged by the user.
    """
    def __init__(self, canvas, label, subtrees, **attribs):
        """
        :type node:
        :type subtrees: list(CanvasWidgetI)
        """
        ...
    
    def __setitem__(self, attr, value):
        ...
    
    def __getitem__(self, attr):
        ...
    
    def label(self):
        ...
    
    def subtrees(self):
        ...
    
    def set_label(self, label):
        """
        Set the node label to ``label``.
        """
        ...
    
    def replace_child(self, oldchild, newchild):
        """
        Replace the child ``oldchild`` with ``newchild``.
        """
        ...
    
    def remove_child(self, child):
        ...
    
    def insert_child(self, index, child):
        ...
    
    def _tags(self):
        ...
    
    def _subtree_top(self, child):
        ...
    
    def _node_bottom(self):
        ...
    
    def _update(self, child):
        ...
    
    def _maintain_order(self, child):
        ...
    
    def _maintain_order_vertical(self, child):
        ...
    
    def _maintain_order_horizontal(self, child):
        ...
    
    def _manage_horizontal(self):
        ...
    
    def _manage_vertical(self):
        ...
    
    def _manage(self):
        ...
    
    def __repr__(self):
        ...
    


def _tree_to_treeseg(canvas, t, make_node, make_leaf, tree_attribs, node_attribs, leaf_attribs, loc_attribs):
    ...

def tree_to_treesegment(canvas, t, make_node=..., make_leaf=..., **attribs):
    """
    Convert a Tree into a ``TreeSegmentWidget``.

    :param make_node: A ``CanvasWidget`` constructor or a function that
        creates ``CanvasWidgets``.  ``make_node`` is used to convert
        the Tree's nodes into ``CanvasWidgets``.  If no constructor
        is specified, then ``TextWidget`` will be used.
    :param make_leaf: A ``CanvasWidget`` constructor or a function that
        creates ``CanvasWidgets``.  ``make_leaf`` is used to convert
        the Tree's leafs into ``CanvasWidgets``.  If no constructor
        is specified, then ``TextWidget`` will be used.
    :param attribs: Attributes for the canvas widgets that make up the
        returned ``TreeSegmentWidget``.  Any attribute beginning with
        ``'tree_'`` will be passed to all ``TreeSegmentWidgets`` (with
        the ``'tree_'`` prefix removed.  Any attribute beginning with
        ``'node_'`` will be passed to all nodes.  Any attribute
        beginning with ``'leaf_'`` will be passed to all leaves.  And
        any attribute beginning with ``'loc_'`` will be passed to all
        text locations (for Trees).
    """
    ...

class TreeWidget(CanvasWidget):
    """
    A canvas widget that displays a single Tree.
    ``TreeWidget`` manages a group of ``TreeSegmentWidgets`` that are
    used to display a Tree.

    Attributes:

      - ``node_attr``: Sets the attribute ``attr`` on all of the
        node widgets for this ``TreeWidget``.
      - ``node_attr``: Sets the attribute ``attr`` on all of the
        leaf widgets for this ``TreeWidget``.
      - ``loc_attr``: Sets the attribute ``attr`` on all of the
        location widgets for this ``TreeWidget`` (if it was built from
        a Tree).  Note that a location widget is a ``TextWidget``.

      - ``xspace``: The amount of horizontal space to leave between
        subtrees when managing this widget.  Default value is 10.
      - ``yspace``: The amount of space to place between the node and
        its children when managing this widget.  Default value is 15.

      - ``line_color``: The color of the lines connecting each expanded
        node to its subtrees.
      - ``roof_color``: The color of the outline of the triangular roof
        for collapsed trees.
      - ``roof_fill``: The fill color for the triangular roof for
        collapsed trees.
      - ``width``

      - ``orientation``: Determines whether the tree branches downwards
        or rightwards.  Possible values are ``'horizontal'`` and
        ``'vertical'``.  The default value is ``'vertical'`` (i.e.,
        branch downwards).

      - ``shapeable``: whether the subtrees can be independently
        dragged by the user.  THIS property simply sets the
        ``DRAGGABLE`` property on all of the ``TreeWidget``'s tree
        segments.
      - ``draggable``: whether the widget can be dragged by the user.
    """
    def __init__(self, canvas, t, make_node=..., make_leaf=..., **attribs):
        ...
    
    def expanded_tree(self, *path_to_tree):
        """
        Return the ``TreeSegmentWidget`` for the specified subtree.

        :param path_to_tree: A list of indices i1, i2, ..., in, where
            the desired widget is the widget corresponding to
            ``tree.children()[i1].children()[i2]....children()[in]``.
            For the root, the path is ``()``.
        """
        ...
    
    def collapsed_tree(self, *path_to_tree):
        """
        Return the ``TreeSegmentWidget`` for the specified subtree.

        :param path_to_tree: A list of indices i1, i2, ..., in, where
            the desired widget is the widget corresponding to
            ``tree.children()[i1].children()[i2]....children()[in]``.
            For the root, the path is ``()``.
        """
        ...
    
    def bind_click_trees(self, callback, button=...):
        """
        Add a binding to all tree segments.
        """
        ...
    
    def bind_drag_trees(self, callback, button=...):
        """
        Add a binding to all tree segments.
        """
        ...
    
    def bind_click_leaves(self, callback, button=...):
        """
        Add a binding to all leaves.
        """
        ...
    
    def bind_drag_leaves(self, callback, button=...):
        """
        Add a binding to all leaves.
        """
        ...
    
    def bind_click_nodes(self, callback, button=...):
        """
        Add a binding to all nodes.
        """
        ...
    
    def bind_drag_nodes(self, callback, button=...):
        """
        Add a binding to all nodes.
        """
        ...
    
    def _make_collapsed_trees(self, canvas, t, key):
        ...
    
    def _make_expanded_tree(self, canvas, t, key):
        ...
    
    def __setitem__(self, attr, value):
        ...
    
    def __getitem__(self, attr):
        ...
    
    def _tags(self):
        ...
    
    def _manage(self):
        ...
    
    def toggle_collapsed(self, treeseg):
        """
        Collapse/expand a tree.
        """
        ...
    


class TreeView(object):
    def __init__(self, *trees):
        ...
    
    def _layout(self):
        ...
    
    def _init_menubar(self):
        ...
    
    def resize(self, *e):
        ...
    
    def destroy(self, *e):
        ...
    
    def mainloop(self, *args, **kwargs):
        """
        Enter the Tkinter mainloop.  This function must be called if
        this demo is created from a non-interactive program (e.g.
        from a secript); otherwise, the demo will close as soon as
        the script completes.
        """
        ...
    


def draw_trees(*trees):
    """
    Open a new window containing a graphical diagram of the given
    trees.

    :rtype: None
    """
    ...

def demo():
    ...

if __name__ == '__main__':
    ...
