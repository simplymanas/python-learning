"""
This type stub file was generated by pyright.
"""

from nltk.stem.api import StemmerI

"""
ISRI Arabic Stemmer

The algorithm for this stemmer is described in:

Taghva, K., Elkoury, R., and Coombs, J. 2005. Arabic Stemming without a root dictionary.
Information Science Research Institute. University of Nevada, Las Vegas, USA.

The Information Science Research Institute’s (ISRI) Arabic stemmer shares many features
with the Khoja stemmer. However, the main difference is that ISRI stemmer does not use root
dictionary. Also, if a root is not found, ISRI stemmer returned normalized form, rather than
returning the original unmodified word.

Additional adjustments were made to improve the algorithm:

1- Adding 60 stop words.
2- Adding the pattern (تفاعيل) to ISRI pattern set.
3- The step 2 in the original algorithm was normalizing all hamza. This step is discarded because it
increases the word ambiguities and changes the original root.

"""
class ISRIStemmer(StemmerI):
    '''
    ISRI Arabic stemmer based on algorithm: Arabic Stemming without a root dictionary.
    Information Science Research Institute. University of Nevada, Las Vegas, USA.

    A few minor modifications have been made to ISRI basic algorithm.
    See the source code of this module for more information.

    isri.stem(token) returns Arabic root for the given token.

    The ISRI Stemmer requires that all tokens have Unicode string types.
    If you use Python IDLE on Arabic Windows you have to decode text first
    using Arabic '1256' coding.
    '''
    def __init__(self):
        self.p3 = ...
        self.p2 = ...
        self.p1 = ...
        self.s3 = ...
        self.s2 = ...
        self.s1 = ...
        self.pr4 = ...
        self.pr53 = ...
        self.re_short_vowels = ...
        self.re_hamza = ...
        self.re_initial_hamza = ...
        self.stop_words = ...
    
    def stem(self, token):
        """
        Stemming a word token using the ISRI stemmer.
        """
        ...
    
    def norm(self, word, num=...):
        """
        normalization:
        num=1  normalize diacritics
        num=2  normalize initial hamza
        num=3  both 1&2
        """
        ...
    
    def pre32(self, word):
        """remove length three and length two prefixes in this order"""
        ...
    
    def suf32(self, word):
        """remove length three and length two suffixes in this order"""
        ...
    
    def waw(self, word):
        """remove connective ‘و’ if it precedes a word beginning with ‘و’ """
        ...
    
    def pro_w4(self, word):
        """process length four patterns and extract length three roots"""
        ...
    
    def pro_w53(self, word):
        """process length five patterns and extract length three roots"""
        ...
    
    def pro_w54(self, word):
        """process length five patterns and extract length four roots"""
        ...
    
    def end_w5(self, word):
        """ending step (word of length five)"""
        ...
    
    def pro_w6(self, word):
        """process length six patterns and extract length three roots"""
        ...
    
    def pro_w64(self, word):
        """process length six patterns and extract length four roots"""
        ...
    
    def end_w6(self, word):
        """ending step (word of length six)"""
        ...
    
    def suf1(self, word):
        """normalize short sufix"""
        ...
    
    def pre1(self, word):
        """normalize short prefix"""
        ...
    


